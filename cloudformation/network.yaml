AWSTemplateFormatVersion: "2010-09-09"
Description: "VPC and networking resources for ECS Fargate and Aurora RDS"

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, test, prod]

Resources:

  GhostVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-ghost-vpc"
        - Key: Environment
          Value: !Ref Environment

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-ghost-igw"
        - Key: Environment
          Value: !Ref Environment

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref GhostVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref GhostVPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-ghost-public-subnet-1"
        - Key: Environment
          Value: !Ref Environment

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref GhostVPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-ghost-public-subnet-2"
        - Key: Environment
          Value: !Ref Environment

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "App Security Group for ECS tasks (Ghost HTTP & DB connections)"
      VpcId: !Ref GhostVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2368
          ToPort: 2368
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-ghost-app-sg"
        - Key: Environment
          Value: !Ref Environment

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Aurora MySQL Security Group (allows access from App SG only)"
      VpcId: !Ref GhostVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref AppSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-ghost-db-sg"
        - Key: Environment
          Value: !Ref Environment

  GhostALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for ALB"
      VpcId: !Ref GhostVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-ghost-alb-sg"
        - Key: Environment
          Value: !Ref Environment

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref GhostVPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-ghost-public-route-table"
        - Key: Environment
          Value: !Ref Environment

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref GhostVPC
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-ghost-private-subnet-1"
        - Key: Environment
          Value: !Ref Environment

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref GhostVPC
      CidrBlock: "10.0.4.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-ghost-private-subnet-2"
        - Key: Environment
          Value: !Ref Environment

  SecretsManagerVPCEndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "SG for Secrets Manager VPC Endpoint"
      VpcId: !Ref GhostVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref AppSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-ghost-secrets-manager-vpc-sg"
        - Key: Environment
          Value: !Ref Environment

  SecretsManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref GhostVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref SecretsManagerVPCEndpointSG
      PrivateDnsEnabled: true

  GhostNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt GhostEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-ghost-nat-gateway"
        - Key: Environment
          Value: !Ref Environment

  GhostEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref GhostVPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-ghost-private-route-table"
        - Key: Environment
          Value: !Ref Environment

  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: GhostNATGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref GhostNATGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable


  GhostLambdaCodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-${Environment}-ghostblog-deleteposts-code"
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-ghostblog-deleteposts-code"
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "Ghost blog Lambda function for deleting all posts"
        - Key: Project
          Value: "GhostBlog"


Outputs:

  SecretsManagerVPCEndpointSGId:
    Description: "SG ID for Secrets Manager VPC Endpoint"
    Value: !Ref SecretsManagerVPCEndpointSG
    Export:
      Name: !Sub "${Environment}-GhostSecretsManagerVPCEndpointSGId"

  VPCId:
    Description: "VPC ID"
    Value: !Ref GhostVPC
    Export:
      Name: !Sub "${Environment}-GhostVPCId"

  PublicSubnet1Id:
    Description: "Public Subnet 1"
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${Environment}-GhostPublicSubnet1Id"

  PublicSubnet2Id:
    Description: "Public Subnet 2"
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${Environment}-GhostPublicSubnet2Id"

  PrivateSubnet1Id:
    Description: "Private Subnet 1"
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${Environment}-GhostPrivateSubnet1Id"

  PrivateSubnet2Id:
    Description: "Private Subnet 2"
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${Environment}-GhostPrivateSubnet2Id"

  GhostALBSecurityGroupId:
    Description: "SG ID for ALB"
    Value: !Ref GhostALBSecurityGroup
    Export:
      Name: !Sub "${Environment}-GhostALBSecurityGroupId"

  AppSecurityGroupId:
    Description: "App Security Group ID"
    Value: !Ref AppSecurityGroup
    Export:
      Name: !Sub "${Environment}-GhostAppSecurityGroupId"

  DBSecurityGroupId:
    Description: "Aurora DB Security Group ID"
    Value: !Ref DBSecurityGroup
    Export:
      Name: !Sub "${Environment}-GhostDBSecurityGroupId"

  GhostLambdaCodeBucketName:
    Description: "S3 bucket used to store Lambda code for deleting Ghost blog posts"
    Value: !Ref GhostLambdaCodeBucket
    Export:
      Name: !Sub "${Environment}-GhostLambdaCodeBucketName"