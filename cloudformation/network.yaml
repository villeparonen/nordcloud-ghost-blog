AWSTemplateFormatVersion: "2010-09-09"
Description: "VPC ja verkkoresurssit ECS Fargate ja Aurora RDS:lle"

Resources:
  GhostVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ghost-vpc

  # Internet Gateway attached to VPC because Fargate needs to get docker images from internet
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref GhostVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref GhostVPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ghost-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref GhostVPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ghost-public-subnet-2

  GhostALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for ALB"
      VpcId: !Ref GhostVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  # TODO, this is only for MVP. Restrict later!


    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref GhostVPC
      Tags:
        - Key: Name
          Value: ghost-public-route-table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"   # TODO should be restricted also?
      GatewayId: !Ref InternetGateway


  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable


  # Private subnets for RDS Aurora db
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref GhostVPC
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: ghost-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref GhostVPC
      CidrBlock: "10.0.4.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: ghost-private-subnet-2

  # VPC Endpoint so that ECS tasks can connect to Secrets Manager without public internet connection
  SecretsManagerVPCEndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Secrets Manager VPC Endpoint"
      VpcId: !Ref GhostVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !ImportValue GhostAppSecurityGroupId  # ECS-task's Security Group
      Tags:
        - Key: Name
          Value: ghost-secrets-manager-vpc-sg

  SecretsManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref GhostVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref SecretsManagerVPCEndpointSG
      PrivateDnsEnabled: true

  # NAT Gateway for ECS Fargate for getting docker images
  GhostNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt GhostEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  # Elastic IP for NAT Gateway
  GhostEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc


  # Routetable for private subnets (routing through NAT gateway to internet)
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref GhostVPC
      Tags:
        - Key: Name
          Value: ghost-private-route-table

  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: GhostNATGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref GhostNATGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable


Outputs:
  SecretsManagerVPCEndpointSGId:
    Description: "Security Group ID for Secrets Manager VPC Endpoint"
    Value: !Ref SecretsManagerVPCEndpointSG
    Export:
      Name: GhostSecretsManagerVPCEndpointSGId

  VPCId:
    Description: "VPC ID"
    Value: !Ref GhostVPC
    Export:
      Name: GhostVPCId

  PublicSubnet1Id:
    Description: "Julkinen Subnet 1"
    Value: !Ref PublicSubnet1
    Export:
      Name: GhostPublicSubnet1Id

  PublicSubnet2Id:
    Description: "Julkinen Subnet 2"
    Value: !Ref PublicSubnet2
    Export:
      Name: GhostPublicSubnet2Id

  PrivateSubnet1Id:
    Description: "Privaatti Subnet 1"
    Value: !Ref PrivateSubnet1
    Export:
      Name: GhostPrivateSubnet1Id

  PrivateSubnet2Id:
    Description: "Privaatti Subnet 2"
    Value: !Ref PrivateSubnet2
    Export:
      Name: GhostPrivateSubnet2Id

  GhostALBSecurityGroupId:
    Description: "Security Group ID for ALB"
    Value: !Ref GhostALBSecurityGroup
    Export:
      Name: GhostALBSecurityGroupId


